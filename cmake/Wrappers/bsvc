#!/bin/bash
#
# Bluespec compiler driver for CMake
#
set -e

function join_by 
{ 
    local IFS="$1"; shift; echo "$*"; 
}

VERBOSE=false

function log
{
    if [ "$VERBOSE" == "true" ]; then 
        echo "$*"
    fi
}

BSV_COMPILER="bsc"
COMMAND_LINE=$*

#
# verify compiler exists
#
if ! command -v $BSV_COMPILER &> /dev/null
then
    echo "[bsvc] ERROR: bsc executable could not be found in system PATH."
    exit 1
fi

#
# Parse options
#
OUTPUT=""
TARGET=""
INCLUDE_DIRECTORIES=("%/Libraries")
STATIC_LIBRARY=false

POSITIONAL=()
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
        -o|--output)
            OUTPUT="$2"
            shift # past argument
            shift # past value
            ;;
        -I)
            # Ignore our own target directory to remove the posibility of encountering 
            # multple dependencies.
            if [[ $2 != *$TARGET ]]; then
                log "[bsvc] Library Include Directory Specified: $2"
                INCLUDE_DIRECTORIES+=("$2")
            fi
            shift # past argument
            shift # past value
            ;;
        --static-library)
            STATIC_LIBRARY=true
            shift # past argument
            ;;
        -t)
            TARGET=$2
            shift # past argument
            shift # past value
            ;;
        -v|--verbose)
            VERBOSE=true
            shift # past argument
            ;;
        *)    # unknown option
            if [ "$TARGET" == "" ] || [[ $1 != *$TARGET ]]; then
                log "[bsvc] OPTIONAL ARGUMENT: $1"
                POSITIONAL+=("$1") # save it in an array for later
            fi
            shift # past argument
            ;;
  esac
done

if [ ${#POSITIONAL[@]} -eq 0 ]; then
    echo "[bsvc] ERROR: No input files specified."
    echo "[bsvc] Command line given: $COMMAND_LINE"
    exit 1
fi

if [ ${#POSITIONAL[@]} -gt 1 ] && [ "$STATIC_LIBRARY" != "true" ]; then
    echo "[bsvc] ERROR: Extra arguments detected."
    echo "[bsvc] Command line given: $COMMAND_LINE"
    exit 1
fi

if [ -z "$OUTPUT" ]; then
    echo "[bsvc] ERROR: -o option is required"
    echo "[bsvc] Command line given: $COMMAND_LINE"
    exit 1
fi

if [ "$STATIC_LIBRARY" == "true" ]; then
    log "[bsvc] Creating static library ${OUTPUT}"
    # Static library mode
    mkdir -p "$OUTPUT"

    for OBJECT_FILE in "${POSITIONAL[@]}"
    do
        TARGET_NAME=$(basename "$OBJECT_FILE" .bsv.bo)
        cp "${OBJECT_FILE}" "${OUTPUT}/${TARGET_NAME}.bo"
    done
else
    log "[bsvc] Creating object file $(basename "$INPUT_FILE" .bsv).bo"

    INPUT_FILE=${POSITIONAL[0]}

    # Create the include directory spec by joining all directories specified
    # delimited by a colon ':'
    #
    INCLUDE_DIRECTORIES_SPEC=$(join_by : "${INCLUDE_DIRECTORIES[@]}")

    # Determine the output directory based on the dirname of the output specified
    OUTPUT_DIR=$(dirname "$OUTPUT")
    SOURCE_DIR=$(dirname "$INPUT_FILE")

    # Run the compiler
    $BSV_COMPILER -q -u -bdir "$OUTPUT_DIR" -p "$SOURCE_DIR:$INCLUDE_DIRECTORIES_SPEC" "$INPUT_FILE"

    # bsc outputs foo.bo for inputs of foo.bsv which may not be what CMake expects.
    # If the output file is different than what CMake expects copy it.
    OUTPUT_FILENAME_EXPECTED=$(basename "$OUTPUT")
    OUTPUT_FILENAME_ACTUAL=$(basename "$INPUT_FILE" .bsv).bo

    if [ "$OUTPUT_FILENAME_EXPECTED" != "$OUTPUT_NAME_ACTUAL" ]; then
        OUTPUT_FILE_SOURCE="$OUTPUT_DIR/$OUTPUT_FILENAME_ACTUAL"
        OUTPUT_FILE_DEST="$OUTPUT_DIR/$OUTPUT_FILENAME_EXPECTED"

        log "[bsvc] Copying $OUTPUT_FILE_SOURCE to $OUTPUT_FILE_DEST"
        cp "$OUTPUT_FILE_SOURCE" "$OUTPUT_FILE_DEST"
    fi
fi
